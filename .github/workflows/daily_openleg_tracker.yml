name: New York State Tracker Daily Upload

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch:
    inputs:
      step_to_run:
        description: "Optional: specify step to run (not used in this combined workflow)"
        required: false
        default: "run_tracker"

jobs:
  run-tracker-and-commit:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl requests papermill jupyter Office365-REST-Python-Client

      # Step 4: Run the Open Leg Tracker notebook with Papermill
      - name: Run Open Leg Tracker
        env:
          OPENLEG_API_KEY: ${{ secrets.OPENLEG_API_KEY }}
          SP_USER: ${{ secrets.SP_USER }}
          SP_PASSWORD: ${{ secrets.SP_PASSWORD }}
          SHAREPOINT_SITE_URL: ${{ secrets.SHAREPOINT_SITE_URL }}
          TARGET_FOLDER_RELATIVE_URL: ${{ secrets.TARGET_FOLDER_RELATIVE_URL }}
        run: |
          echo "Starting Open Leg Tracker..."
          papermill src/NY_State_Leg_Tracker_V2.ipynb src/NY_State_Leg_Tracker_V2_output.ipynb --log-output --log-level DEBUG
          echo "Notebook executed successfully."

      # Step 5: Verify generated file exists and capture its name
      - name: Verify generated file
        id: verify-file
        run: |
          # Search for a file that matches the timestamped naming pattern in the src directory
          FILE=$(ls src/NY_Senate_bills_data_*.xlsx 2>/dev/null | sort | tail -n 1)
          
          if [ -n "$FILE" ] && [ -f "$FILE" ]; then
            echo "File found: $FILE"
            echo "file_exists=true" >> $GITHUB_OUTPUT
            echo "file_name=$FILE" >> $GITHUB_OUTPUT
          else
            echo "No matching file found."
            echo "file_exists=false" >> $GITHUB_OUTPUT
            echo "file_name=" >> $GITHUB_OUTPUT
          fi

      # Step 6: Commit and Push Changes if file exists and has changes
      - name: Commit and Push Changes
        if: steps.verify-file.outputs.file_exists == 'true'
        run: |
          echo "Configuring Git user..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          FILE_NAME=${{ steps.verify-file.outputs.file_name }}
          echo "Checking for changes in $FILE_NAME..."
          git add "$FILE_NAME"

          if ! git diff-index --quiet HEAD --; then
            echo "Changes detected. Committing and pushing..."
            git commit -m "Update $FILE_NAME with new data"
            git push
            echo "Changes have been committed and pushed successfully."
          else
            echo "No changes detected. Exiting gracefully."
          fi

      # Step 7: Run the SharePoint Upload notebook with an explicit kernel override
      - name: Run SharePoint Upload
        if: steps.verify-file.outputs.file_exists == 'true'
        env:
          SP_USER: ${{ secrets.SP_USER }}
          SP_PASSWORD: ${{ secrets.SP_PASSWORD }}
          SHAREPOINT_SITE_URL: ${{ secrets.SHAREPOINT_SITE_URL }}
          TARGET_FOLDER_RELATIVE_URL: ${{ secrets.TARGET_FOLDER_RELATIVE_URL }}
        run: |
          echo "Starting SharePoint Upload..."
          papermill src/SharepointUpload.ipynb src/SharepointUpload_output.ipynb --log-output --log-level DEBUG --kernel python3
          echo "SharePoint Upload notebook executed successfully."
